AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-hiberry-app-orders

Globals:
  Function:
    Timeout: 120
  Api:
    Cors:
        AllowHeaders: "'Content-Type,Authorization,authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
        MaxAge: "'3600'"
        AllowMethods: "'HEAD,OPTIONS,POST,GET,PUT,DELETE'"
        AllowCredentials: "'false'"
    GatewayResponses:
        DEFAULT_4xx:
            ResponseParameters:
                Headers:
                    Access-Control-Allow-Headers: "'Content-Type,Authorization,authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                    Access-Control-Allow-Origin: "'*'"
                    Access-Control-Allow-Methods: "'HEAD,OPTIONS,POST,GET,PUT,DELETE'"
        DEFAULT_5xx:
            ResponseParameters:
                Headers:
                    Access-Control-Allow-Headers: "'Content-Type,Authorization,authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                    Access-Control-Allow-Origin: "'*'"
                    Access-Control-Allow-Methods: "'HEAD,OPTIONS,POST,GET,PUT,DELETE'"

Parameters:
  ShopifyEventBusName:
    Type: String
  StageName:
    Type: String
    Default: development
    AllowedValues:
      - local
      - development
      - uat
      - prod
Resources:

  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "Orders"
      AttributeDefinitions:
        - AttributeName: delivery_date
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: delivery_date
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  HiBerryLocationIndex:
    Type: AWS::Location::PlaceIndex
    Properties:
      DataSource: Esri
      Description: Place index for locating delivery address Using Esri
      IndexName: !Sub "HiBerrySearchIndex"
      PricingPlan: RequestBasedUsage

  CreateOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "CreateOrderFunction-${StageName}"
      CodeUri: .
      Handler: app.create_order
      Runtime: python3.11
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: create-order
          POWERTOOLS_LOG_LEVEL: INFO
          APP_ENVIRONMENT: !Ref StageName
      Events:
        HttpPost:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /orders
            Method: post
            Auth:
              Authorizer: HiBerryCognitoAuthorizer
      Role: !GetAtt CreateOrderRole.Arn

  RetrieveOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "RetrieveOrdersFunction-${StageName}"
      CodeUri: .
      Handler: app.retrieve_orders
      Runtime: python3.11
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: retrieve-orders
          POWERTOOLS_LOG_LEVEL: INFO
          APP_ENVIRONMENT: !Ref StageName
      Events:
        HttpPost:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /orders
            Method: get
            Auth:
              Authorizer: HiBerryCognitoAuthorizer
      Role: !GetAtt RetrieveOrdersRole.Arn

  UpdateOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "UpdateOrderFunction-${StageName}"
      CodeUri: .
      Handler: app.update_order
      Runtime: python3.11
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: update-order
          POWERTOOLS_LOG_LEVEL: INFO
          APP_ENVIRONMENT: !Ref StageName
      Events:
        HttpPut:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /orders
            Method: put
            Auth:
              Authorizer: HiBerryCognitoAuthorizer
      Role: !GetAtt UpdateOrdersRole.Arn

  DeleteOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "DeleteOrderFunction-${StageName}"
      CodeUri: .
      Handler: app.delete_order
      Runtime: python3.11
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: delete-order
          POWERTOOLS_LOG_LEVEL: INFO
          APP_ENVIRONMENT: !Ref StageName
      Events:
        HttpDelete:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /orders
            Method: delete
            Auth:
              Authorizer: HiBerryCognitoAuthorizer
      Role: !GetAtt DeleteOrdersRole.Arn

  ScheduleOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "ScheduleOrdersFunction-${StageName}"
      CodeUri: delivery/
      Handler: app.set_delivery_schedule_order
      Runtime: python3.11
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: schedule-orders
          POWERTOOLS_LOG_LEVEL: INFO
          APP_ENVIRONMENT: !Ref StageName
      Events:
        HttpPost:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /schedule-orders
            Method: post
            Auth:
              Authorizer: HiBerryCognitoAuthorizer
      Role: !GetAtt ScheduleOrdersRole.Arn

  ShopifyOrderIntegrationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "ShopifyOrderIntegrationFunction-${StageName}"
      CodeUri: integration/
      Handler: app.lambda_handler
      Runtime: python3.11
      Architectures:
      - x86_64
      Environment:
        Variables:
          CREATE_ORDER_FUNCTION_NAME: !Ref CreateOrderFunction
          POWERTOOLS_SERVICE_NAME: shopify-order-integration
          POWERTOOLS_LOG_LEVEL: INFO
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt ShopifyOrderIntegrationDLQ.Arn
      Events:
        ShopifyOrder:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref ShopifyEventBusName
            Pattern:
              detail-type:
                - "shopifyWebhook"
              detail:
                metadata:
                  X-Shopify-Topic:
                    - prefix: "orders/create"
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref CreateOrderFunction

  ShopifyOrderIntegrationDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "ShopifyOrderIntegrationDLQ-${StageName}"

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CreateOrderFunction.Arn
      Principal: apigateway.amazonaws.com

  CreateOrderRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "CreateOrderRole-${StageName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBPutItemPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:Query
                Resource: !GetAtt OrdersTable.Arn
        - PolicyName: LocationServiceAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - geo:SearchPlaceIndexForText
                Resource: !GetAtt HiBerryLocationIndex.Arn
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  RetrieveOrdersRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "RetrieveOrdersRole-${StageName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBQueryTablePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                Resource: !GetAtt OrdersTable.Arn
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
                
  UpdateOrdersRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "UpdateOrdersRole-${StageName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBUpdateItemPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:Query
                Resource: !GetAtt OrdersTable.Arn
        - PolicyName: LocationServiceAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - geo:SearchPlaceIndexForText
                Resource: !GetAtt HiBerryLocationIndex.Arn
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  DeleteOrdersRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "DeleteOrdersRole-${StageName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBDeleteItemPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DeleteItem
                Resource: !GetAtt OrdersTable.Arn
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
                
  ScheduleOrdersRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "ScheduleOrdersRole-${StageName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBQueryTablePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                Resource: !GetAtt OrdersTable.Arn
        - PolicyName: DynamoDBBulkUpdateTablePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                Resource: !GetAtt OrdersTable.Arn
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  LambdaInvokeRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: !Sub "CreateOrderInvokeRole-${StageName}"
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: LambdaInvokePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource: !GetAtt CreateOrderFunction.Arn
          - PolicyName: CloudWatchLogsPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "*"

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName
      Auth:
        Authorizers:
          HiBerryCognitoAuthorizer:
            UserPoolArn:
              - !Sub 
                - 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}'
                - UserPoolId: !ImportValue HiBerryUserPoolIdExport

Outputs:
  CreateOrderFunction:
    Description: "Lambda Function ARN"
    Value: !GetAtt CreateOrderFunction.Arn
  HttpApiEndpoint:
    Description: The default endpoint ApiGateway.
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/"