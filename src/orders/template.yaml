AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-hiberry-app

Globals:
  Function:
    Timeout: 7

Parameters:
  ShopifyEventBusName:
    Type: String
  StageName:
    Type: String
    Default: dev
    AllowedValues:
      - local
      - dev
      - uat
      - prod
Resources:

  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Orders
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: delivery_date
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: delivery_date
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  CreateOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "CreateOrderFunction-${StageName}"
      CodeUri: .
      Handler: app.lambda_handler
      Runtime: python3.11
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: create-order
          POWERTOOLS_LOG_LEVEL: INFO
      Events:
        HttpPost:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /order
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersTable
  ShopifyOrderIntegrationFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: !Sub "ShopifyOrderIntegrationFunction-${StageName}"
      CodeUri: integration/
      Handler: app.lambda_handler
      Runtime: python3.11
      Architectures:
      - x86_64
      Environment: 
        Variables:
          CREATE_ORDER_API_URL: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/order"
          POWERTOOLS_SERVICE_NAME: shopify-order-integration
          POWERTOOLS_LOG_LEVEL: INFO
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt ShopifyOrderIntegrationDLQ.Arn
      Events:
        ShopifyOrder:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref ShopifyEventBusName
            Pattern:
              detail-type: 
                - "shopifyWebhook"
              detail:
                metadata:
                  X-Shopify-Topic:
                    - prefix: "orders/create"

  HiBerryLocationIndex:
    Type: AWS::Location::PlaceIndex
    Properties:
      DataSource: Esri
      Description: Place index for locating delivery address Using Esri
      IndexName: HiBerrySearchIndex
      PricingPlan: RequestBasedUsage

  HiBerryUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: HiBerryInternalUsers
      MfaConfiguration: "OFF"
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
      UsernameAttributes:
        - email
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
  HiBerryUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: HiBerryAppClient
      UserPoolId: !Ref HiBerryUserPool
      GenerateSecret: false
      RefreshTokenValidity: 1
      AccessTokenValidity: 1
      IdTokenValidity: 1

  MyUserPoolGroupAdmin:
    Type: "AWS::Cognito::UserPoolGroup"
    Properties:
      GroupName: Admin
      UserPoolId: !Ref HiBerryUserPool
  MyUserPoolGroupManager:
    Type: "AWS::Cognito::UserPoolGroup"
    Properties:
      GroupName: Manager
      UserPoolId: !Ref HiBerryUserPool
  MyUserPoolGroupUser:
    Type: "AWS::Cognito::UserPoolGroup"
    Properties:
      GroupName: User
      UserPoolId: !Ref HiBerryUserPool

  ShopifyOrderIntegrationDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ShopifyOrderIntegrationDLQ

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName
      # Auth:
      #   DefaultAuthorizer: MyCognitoAuthorizer
      #   Authorizers:
      #       MyCognitoAuthorizer:
      #         UserPoolArn:
      #           Fn::GetAtt:
      #             - HiBerryUserPool
      #             - Arn

  # HiBerryCognitoAuthorizer:
  #   Type: AWS::ApiGateway::Authorizer
  #   Properties:
  #     Name: HiBerryCognitoAuthorizer
  #     Type: COGNITO_USER_POOLS
  #     IdentitySource: method.request.header.Authorization
  #     RestApiId: !Ref ApiGateway
  #     ProviderARNs:
  #       - !GetAtt HiBerryUserPool.Arn

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CreateOrderFunction.Arn
      Principal: apigateway.amazonaws.com


Outputs:
  CreateOrderFunction:
    Description: "Lambda Function ARN"
    Value: !GetAtt CreateOrderFunction.Arn
  HttpApiEndpoint:
    Description: The default endpoint ApiGateway.
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/"